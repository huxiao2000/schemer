(define (var x) (vector x))
(define (var? x) (vector? x))
(define (walk v s)
  (let ((a (and (var? v) (assq v s))))
    (if a (walk (cdr a) s) v)))
(define (occurs? x v s)
  (let ((v (walk v s)))
    (cond ((var? v) (eq? x v))
          ((pair? v) (or (occurs? x (car v) s)
                         (occurs? x (cdr v) s)))
          (else #f))))
(define (ext-s x v s)
  (if (occurs? x v s)
      #f
      (cons (cons x v) s)))
(define (unify u v s)
  (let ((u (walk u s)) (v (walk v s)))
    (cond ((eq? u v) s)
          ((var? u) (if (var? v)
                        (cons (cons u v) s)
                        (ext-s u v s)))
          ((var? v) (ext-s v u s))
          ((and (pair? u) (pair? v))
           (let ((s (unify (car u) (car v) s)))
             (and s (unify (cdr u) (cdr v) s))))
          (else #f))))